# --- BEGIN OF FIREHOL DEFAULTS ---

# These are the defaults for FireHOL.
# You can set everything system-wide here, or set any or all
# of these to your firewall config file.
# The options set in the firewall config file have the highest
# priority (will overwrite these one).

# FireHOL config directory.
# EVEN IF YOU CHANGE THIS, THE firehol-defaults.conf FILE
# SHOULD STILL EXIST IN THE ORIGINAL $SYSCONFDIR/firehol
FIREHOL_CONFIG_DIR="${FIREHOL_CONFIG_DIR}"

# FireHOL services directory.
# FireHOL will look into this directory for service
# definition files (*.conf).
# Package maintainers may install their service definitions
# in this directory.
# Default: $SYSCONFDIR/firehol/services
FIREHOL_SERVICES_DIR="${FIREHOL_SERVICES_DIR}"

# Where to permanently save state information?
# Default: /var/spool/firehol
FIREHOL_SPOOL_DIR="${FIREHOL_SPOOL_DIR}"

# Where temporary files should go?
FIREHOL_RUN_DIR="${FIREHOL_RUN_DIR}"

# show a spinner during processing that shows
# number of iptables statements generated
FIREHOL_ENABLE_SPINNER=${FIREHOL_ENABLE_SPINNER-0}

# Restore instead of Start when possible.
# If set to 1, FireHOL will actually do a 'restore' when a
# 'start' is requested.
# If enabled and the config files have not changed since
# the last successful activation, the last successfuly
# activated firewall will be restored.
# THIS OPTION SHOULD NOT BE ENABLED IF THE FIREWALL CONFIG
# IS USING DYNAMIC DETECTION OF SERVER PORTS OR OTHER DATA
# THAT MAY INFLUENCE THE GENERATED RULES.
# At the other hand, if the firewall is always static
# this option provides fast startup of the firewall.
# Default: 0
FIREHOL_RESTORE_INSTEAD_OF_START="0"

# Enable IPv4 firewall
# Default: 1
ENABLE_IPV4="${ENABLE_IPV4-1}"

# Enable IPv6 firewall
# Default: 1
ENABLE_IPV6="${ENABLE_IPV6-1}"

# Syslog facility to use when logging FireHOL events.
# This is only used by FireHOL, not the iptables packet
# logging mechanism.
# Default: daemon
FIREHOL_SYSLOG_FACILITY="daemon"

# FireHOL can wait for an interface to come up.
# Set the interface name to wait for, here.
# Default: check the environment variable, if any
WAIT_FOR_IFACE="${WAIT_FOR_IFACE}"

# External program to call on 'start' (successfull or
# failed), 'stop' and 'panic'
# It will be run like this:
# "${FIREHOL_NOTIFICATION_PROGRAM}" "${FIREHOL_CONFIG}" "${result}" "${restored}" "${work_error}" "${work_runtime_error}"
# where
#    FIREHOL_CONFIG is the filename of the config
#    result is either empty, OK or FAILED
#    restored is either NO, OK or FAILED
#    work_error is the count of pre-processing errors encountered
#    work_runtime_error is the count of post-processing errors encountered
# Default: check the environment variable, if any
FIREHOL_NOTIFICATION_PROGRAM="${FIREHOL_NOTIFICATION_PROGRAM}"


# ----------------------------------------------------------------------
# RUNTIME CONTROL VARIABLES

# These do not affect the final firewall output. They just control how
# FireHOL behaves.
# They can also be set as environment variables of the same name.

# If set to 1, FireHOL will attempt to activate the firewall with
# iptables-restore. This is a lot faster firewall activation.
# The only drawback of this, is that in case of error, FireHOL may be unable to
# identify the exact statement in the firewall config that caused the error.
# Default: 1
FIREHOL_FAST_ACTIVATION="${FIREHOL_FAST_ACTIVATION-1}"

# Only when FIREHOL_FAST_ACTIVATION=1, this value is the time in seconds, to
# wait for just an ENTER before trying the new firewall.
FIREHOL_WAIT_USER_BEFORE_TRY=600

# If set to 0, firehol will not try to load the required kernel modules
# Generally, FireHOL is able to detect if a module is compiled in the kernel,
# even if this is set to 1.
# Default: 1
# FIREHOL_LOAD_KERNEL_MODULES="${FIREHOL_LOAD_KERNEL_MODULES-1}"
FIREHOL_LOAD_KERNEL_MODULES="{{ firehol__load_kernel_modules }}"

# Firewall Policy during firewall activation
# Default: ACCEPT
# Possible values: ACCEPT, REJECT, DROP
FIREHOL_INPUT_ACTIVATION_POLICY="${FIREHOL_INPUT_ACTIVATION_POLICY-ACCEPT}"
FIREHOL_OUTPUT_ACTIVATION_POLICY="${FIREHOL_OUTPUT_ACTIVATION_POLICY-ACCEPT}"
FIREHOL_FORWARD_ACTIVATION_POLICY="${FIREHOL_FORWARD_ACTIVATION_POLICY-ACCEPT}"

# Do we allow pre-existing connections to continue during activation?
# If this is set to 0 and FIREHOL_FAST_ACTIVATION is also set to 0, then every
# time the firewall is activated, existing connections will be disrupted.
# Default: 1
FIREHOL_ESTABLISHED_ACTIVATION_ACCEPT="${FIREHOL_ESTABLISHED_ACTIVATION_ACCEPT-1}"

# If you want to restore the firewall using the iptables init script of
# your distribution, set here the paths where it expects the rules.
# These settings are only saved when 'save' is requested at the command line.
# Default: unset for automatic detection.
FIREHOL_AUTOSAVE="${FIREHOL_AUTOSAVE}"
FIREHOL_AUTOSAVE6="${FIREHOL_AUTOSAVE6}"

# Ready to use values for various distributions:
#
# Gentoo
# Check: /etc/conf.d/iptables and ip6tables
#FIREHOL_AUTOSAVE="/var/lib/iptables/rules-save"
#FIREHOL_AUTOSAVE6="/var/lib/ip6tables/rules-save"
#
# Arch
# Check: /usr/lib/systemd/system/iptables.service and ip6tables.service
#FIREHOL_AUTOSAVE=/etc/iptables/iptables.rules
#FIREHOL_AUTOSAVE6=/etc/iptables/ip6tables.rules


# ----------------------------------------------------------------------
# FIREWALL CONFIGURATION VARIABLES

# These affect the final firewall output.
# They can also be set in the firewall config file.

# This controls how 'optimal' or 'accurate' the iptables statements
# generated will be.
# 'optimal' generates a production state firewall optimized for speed.
# It makes FireHOL accept all packets of ESTABLISHED connections at the
# beginning of the firewall, thus practically eliminating the need for
# filtering ESTABLISHED traffic. Packet filtering is only done for NEW
# sockets.
# 'accurate' generates a firewall that precisely matches all packets in both
# directions: client->server and server->client
# This setting affects logging, accounting and stateless rules.
# When it is set to 'optimal', logginng will only log the first packet of NEW
# sockets, accounting will only account the first packet of NEW sockets and
# stateless rules are disabled.
# When it is set to 'accurate', logging and accounting will be done for all
# packets and stateless rules are enabled.
# Default: accurate
# Possible Values: optimal accurate
FIREHOL_RULESET_MODE="{{ firehol__ruleset_mode }}"

# Should we drop all INVALID packets always?
# INVALID packets as seen by the connection tracker.
# Check also the next section (SYSTEM CONFIGURATION) for related options.
# It can be enabled per interface using 'protection invalid'.
# This will be enabled if you use the synproxy helper.
# Default: 1
#
# Care: ICMPv6 packets such as Neighbour Discovery are marked as INVALID
# may be better using firehol-protection(5) to control matching of INVALID packets and others on a per-interface basis.
FIREHOL_DROP_INVALID={{ firehol__drop_invalid }}

# When FIREHOL_DROP_INVALID=1 shall we also log the droped packets?
# Default: 1
FIREHOL_LOG_DROP_INVALID=1

# If set to 1, FireHOL will silently drop orphan TCP packets with ACK,FIN set.
# In modern kernels, the connection tracker detects closed sockets
# and removes them from memory before receiving the FIN,ACK from the remote
# party. This makes FireHOL log these packets when they will be received.
# To silently drop these packets, enable this option.
# Default: 1
FIREHOL_DROP_ORPHAN_TCP_ACK_FIN=1

# If set to 1, FireHOL will silently drop orphan TCP packets with ACK,RST set.
# In modern kernels, the connection tracker detects closed sockets
# and removes them from memory before receiving the ACK,RST from the remote
# party. This makes FireHOL log these packets when they will be received.
# To silently drop these packets, enable this option.
# Default: 1
FIREHOL_DROP_ORPHAN_TCP_ACK_RST=1

# If set to 1, FireHOL will silently drop orphan TCP packets with ACK set.
# In modern kernels, the connection tracker detects closed sockets
# and removes them from memory before receiving the ACK from the remote
# party. This makes FireHOL log these packets when they will be received.
# To silently drop these packets, enable this option.
# Default: 1
FIREHOL_DROP_ORPHAN_TCP_ACK=1

# If set to 1, FireHOL will silently drop orphan TCP packets with RST set.
# In modern kernels, the connection tracker detects closed sockets
# and removes them from memory before receiving the RST from the remote
# party. This makes FireHOL log these packets when they will be received.
# To silently drop these packets, enable this option.
# Default: 1
FIREHOL_DROP_ORPHAN_TCP_RST=1

# If set to 1, FireHOL will silently drop orphan ICMP destination unreachable
# packets. In modern kernels, the connection tracker detects closed sockets
# and removes them from memory before receiving the ICMP destination
# unreachable from the remote party. This makes FireHOL log these packets when
# they will be received.
# To silently drop these packets, enable this option.
# Default: 1
FIREHOL_DROP_ORPHAN_IPV4_ICMP_TYPE3=1

# If enabled FireHOL will create a chain per server/client statement and jump
# to it from the main flow. Normaly this jump is only required for clarity.
# So it is advised to leave this setting to 0, for a more efficient firewall.
# Default: 0
FIREHOL_CHAIN_PER_SERVICE=0

# If enabled, FireHOL will use the multiport matches of iptables, when
# possible. Note that multiport matches in iptables do not support matching
# both source and destination ports on the same statement, with different
# ports for source and destination.
# So, FireHOL will only use it if sport or dport in set to 'any' (or not at
# all) or when sport and dport are the exactly the same ports.
# Default: 1
FIREHOL_SUPPORT_MULTIPORT=1

# There are matches that are more "expensive" than others. When enabled,
# FireHOL will use branching (create a new chain and jump to it) in order to
# avoid executing expensive matches more than once per statement.
# Expensive matches are: limit, connlimit, ipset (not when used in src/dst),
# helpers (for RELATED matches).
# Default: 1
FIREHOL_PROTECTED_MATCHES=1

# How to configure conntrack helper assignement?
#
# 'kernel'  = the kernel will attempt to match RELATED sockets for all
#             conntrack helpers and all traffic matching its predefined rules.
#             This is considered a security threat and should be avoided.
#             Check: https://home.regit.org/netfilter-en/secure-use-of-helpers/
#
# 'firehol' = FireHOL will generate rules in the 'raw' table, using the -j CT
#             target of iptables to match the flows of the statements
#             the conntrack helpers are used.
#             CAUTION: FireHOL generated statements are not NAT aware.
#             You should only use this, if you don't NAT traffic that have to
#             be seen by conntrack helpers to detect RELATED ports.
#
# 'manual'  = You configure conntrack helper assignement manually using
#             the 'cthelper' firehol helper.
#             In this case, neither the kernel nor FireHOL will do anything
#             about conntrack helpers assignement. 
#
# Default: kernel
FIREHOL_CONNTRACK_HELPERS_ASSIGNMENT="{{ firehol__conntrack_helpers_assignment }}"

# SYNPROXY options
# The options to pass to -j SYNPROXY
# Default: --sack-perm --timestamp --wscale 7 --mss 1460
FIREHOL_SYNPROXY_OPTIONS="--sack-perm --timestamp --wscale 7 --mss 1460"

# Shall the SYNPROXY FireHOL helper log the packets as they pass during
# the various phases?
# Default: 0
FIREHOL_SYNPROXY_LOG=0

# Shall the dnat helper log the packets as they pass during?
FIREHOL_NAT_HELPER_LOG=0

# When enabled, synproxy will exclude for the SYNPROXY->SERVER match
# all the packets that have an UID or a GID (ownmer matches).
# When enabled, dst is not required for synproxy and synproxy can
# be used on dynamic IPs (it requires an 'src not; though).
# Default: 0
FIREHOL_SYNPROXY_EXCLUDE_OWNER=0

# Trust loopback?
# loose     = Trust device lo unconditionally
# strict    = Trust only IPs 127.0.0.0/8 and ::1 on device lo
# Default: loose
FIREHOL_TRUST_LOOPBACK="loose"

# If set to non-empty, FireHOL will apply a global reverse filtering on all
# traffic. If you use connection tracker helpers, you should enable this.
# Check: https://home.regit.org/netfilter-en/secure-use-of-helpers/
# Default: <empty>
# Possible Values: <check: iptables -m rpfilter --help>
FIREHOL_GLOBAL_RPFILTER=

# The default policy for the interfaces of the firewall. This can be
# controlled on a per interface basis using the policy interface subcommand. 
# Default: DROP
# Possible Values: DROP REJECT RETURN or custom action
DEFAULT_INTERFACE_POLICY="DROP"

# The default policy for the router commands of the firewall. This can be
# controlled on a per interface basis using the policy interface subscommand.
# Default: RETURN
# Possible Values: DROP REJECT RETURN or custom action
DEFAULT_ROUTER_POLICY="RETURN"

# At the end of the firewall, there may be packets not matched
# anywhere. What to do with them?
# Default: DROP
# Possible Values: DROP REJECT
UNMATCHED_INPUT_POLICY="DROP"
UNMATCHED_OUTPUT_POLICY="DROP"
UNMATCHED_ROUTER_POLICY="DROP"

# The client ports to be used for "default" client ports when the
# client specified is a foreign host.
# Note that FireHOL will ask the kernel for default client ports of
# the local host. This setting only applies to client ports of remote hosts.
# Default: 1024:65535
DEFAULT_CLIENT_PORTS="1024:65535"

# The time to track persistence manually, when the kernel cannot do it.
FIREHOL_NAT_PERSISTENCE_SECONDS="3600"

# ----------------------------------------------------------------------
# SYSTEM CONFIGURATION

# Set this to 1 have firehol load NAT kernel modules
# It will be enabled automatically if nat commands are given in the firewall.
# Default: 0
FIREHOL_NAT="${FIREHOL_NAT-0}"

# Set this to 1 to enable routing of packets in the kernel
# It will be enabled automatically if routers are defined in the firewall.
# Default: 0
FIREHOL_ROUTING="${FIREHOL_ROUTING-0}"

# Make connection tracker use strick categorization of TCP packets.
# When set to zero the packets that do not seem right will be marked as INVALID
# instead of NEW. It will also improve ACK flood protection.
# This sets net.netfilter.nf_conntrack_tcp_loose=0
# The system default is 1, the firehol default is 0.
# Default: <unset to not set it>
FIREHOL_CONNTRACK_LOOSE_MATCHING=

# How many connection tracking sockets are supported?
# The system default is 65536.
# On busy servers you may need to increase this.
# Keep in mind that each socket in the connection tracker takes 288 bytes.
# Default: <unset to not set it>
FIREHOL_CONNTRACK_MAX=

# How many hash entries should the connection tracker have?
# The system default is 16384.
# On busy servers you may need to increase this. Keep in mind that each hash
# entry takes 8 bytes, but somehow this is related to your CPU L3 cache size.
# Default: <unset to not set it>
FIREHOL_CONNTRACK_HASHSIZE=

# required for synproxy
# This will be automatically set to 1 if you use the synproxy helper.
# This sets net.ipv4.tcp_syncookies=1
# Default: <unset to not set it>
FIREHOL_TCP_SYN_COOKIES=

# required for synproxy
# This will be automatically set to 1 if you use the synproxy helper.
# This sets net.ipv4.tcp_timestamps=1
# Default: <unset to not set it>
FIREHOL_TCP_TIMESTAMPS=


# ----------------------------------------------------------------------
# IPTABLES MARKS BITMASKING

# FireHOL allows multiple independent MARKs.
# By default FireHOL requires 'connmark' and 'usermark'.

# Mark types may be defined with this template:
#
# markdef NAME VALUES [stateful|stateless] [permanent|temporary]
#
#  NAME      = a name for this mark type
#              connmark and usermark should always be defined.
#
#  VALUES    = max number of marks to support (0 to VALUES - 1)
#              VALUES must be a power of two.
#
#  stateful  = all statements that assign this mark should 
#              only apply it on NEW packets.
#
#  stateless = all statements that assign this mark type should
#              only apply it only to traffic matched by the
#              optional rule parameters given.
#
#  temporary = do not save/restore to/from connection marks.
#              This means RESPONSES to the matched packets
#              will not get the mark.
#
#  permanent = save/restore to/from connection marks
#              This means that RESPONSES will get the mark.
#
# NOTES ABOUT markdef OPTIONS
#
# default is : stateful permanent or default
#              in this mode, only NEW packets of connections need
#              to be marked. ESTABLISHED and RELATED packets
#              will automatically get the same mark too.
#              So, in FireHOL mark helpers (connmark, mark, custommark)
#              you will only need to match a REQUEST packet and
#              automatically all the packets of the connection will
#              get the mark.
#
#            - stateful temporary
#              In this mode, only NEW packets will be marked for each
#              connection. ESTABLISHED and RELATED packets will NOT
#              get the mark.
#
#            - stateless permanent
#              In this mode, whatever the helper statement matches
#              will get the mark. This mark will also be applied to
#              all the packets that are encountered after the marked
#              packet and are part of the same socket.
#
#            - stateless temporary or classic
#              In this mode, only whatever the helper statement matches
#              will get the mark. Nothing else.
#

# clear the internal marks - do not remove this line
markdef clear

# connmarks are used by the connmark helper
markdef connmark 64

# usermark are used by the mark helper
markdef usermark 128

# Custom mark example:
#
# markdef qosmark 8
#
# To use it use 'custommark' helper and optional rule parameter.
# The first argument to both should the mark name (qosmark in this case)

# ----------------------------------------------------------------------
# IPTABLES PACKETS LOGGING

# LOG mode for iptables
# Default: LOG
# Possible Values: LOG, ULOG, NFLOG
# LOG = syslog
# We recommend to install ulogd and use NFLOG.
FIREHOL_LOG_MODE="{{ firehol__log_mode }}"

# Accepts anything iptables accepts for each mode.
# Check: iptables -j LOG --help
#        iptables -j ULOG --help
#        iptables -j NFLOG --help
# Default: empty
FIREHOL_LOG_OPTIONS="{{ firehol__log_options }}"

# FireHOL can prefix each log with a keyword.
# Default: empty
FIREHOL_LOG_PREFIX="{{ firehol__log_prefix }}"
FIREHOL_LOG_ESCAPE="\""

# Used only for FIREHOL_LOG_MODE="LOG"
# The syslog level to be used when logging packets.
FIREHOL_LOG_LEVEL="{{ firehol__log_level }}"

# For loglimit, these are the frequency and the burst
# of logging. They are applied per logging rule, not across
# the firewall.
FIREHOL_LOG_FREQUENCY="{{ firehol__log_frequency }}"
FIREHOL_LOG_BURST="{{ firehol__log_burst }}"


# ----------------------------------------------------------------------
# IPSET OPTIONS

# if set to zero, ipset restore does not support
# FLUSH SWAP DESTROY in which case they be executed during postprocess
IPSET_RESTORE_SUPPORTS_FLUSH_SWAP_DESTROY=1

# options that are appended to -m ipset matches when the ipset
# is used instead of src and dst IPs.
# The default is to prevent updating ipset counters
# Default: ! --update-counters ! --update-subcounters
IPSET_SRC_DST_OPTIONS="! --update-counters ! --update-subcounters"

# A recent ipset command uses these:
IPSET_CREATE_OPTION="create"
IPSET_DESTROY_OPTION="destroy"
IPSET_FLUSH_OPTION="flush"
IPSET_ADD_OPTION="add"
IPSET_DELETE_OPTION="del"
IPSET_SWAP_OPTION="swap"
IPSET_SAVE_OPTION="save"
IPSET_RESTORE_OPTION="-! restore"
IPSET_CREATE_IPV6_OPTION="family inet6"
IPSET_LIST_NAMES_EVAL="list -n"

# The default options to be passed to ipset
# when the iptrap helper creates the ipset
IPTRAP_DEFAULT_IPSET_TIMEOUT_OPTIONS="timeout 3600"
IPTRAP_DEFAULT_IPSET_COUNTERS_OPTIONS="timeout 3600 counters"

# ----------------------------------------------------------------------
# OLDER VERSIONS OF IPSET

# IPSET_RESTORE_SUPPORTS_FLUSH_SWAP_DESTROY=0

# older versions do not support the 'counters' option
# even older versions do not support the 'timeout' option
#IPTRAP_DEFAULT_IPSET_TIMEOUT_OPTIONS="timeout 3600"
#IPTRAP_DEFAULT_IPSET_COUNTERS_OPTIONS="" # not supported

# older versions use these
#IPSET_SRC_DST_OPTIONS=
#IPSET_CREATE_OPTION="-N"
#IPSET_DESTROY_OPTION="-X"
#IPSET_FLUSH_OPTION="-F"
#IPSET_ADD_OPTION="-A"
#IPSET_DELETE_OPTION="-D"
#IPSET_SAVE_OPTION="-S"
#IPSET_SWAP_OPTION="-W"
#IPSET_RESTORE_OPTION="-R"
#IPSET_CREATE_IPV6_OPTION="" # No ipv6 support
#IPSET_LIST_NAMES_EVAL="-L | grep Name: | cut -d: -f 2"

# ----------------------------------------------------------------------
# DEFAULT IP SETS

# FireHOL will overwite these settings with the contents of the files with
# the same names in ${FIREHOL_CONFIG_DIR}.
#
# For example, RESERVED_IPV4 will be set from $SYSCONFDIR/firehol/RESERVED_IPV4

# IANA reserved address space that should never appear
RESERVED_IPV4="0.0.0.0/8 127.0.0.0/8 240.0.0.0/4 "
RESERVED_IPV6="::/8 0100::/8 0200::/7 0400::/6 0800::/5 1000::/4 4000::/3 6000::/3 8000::/3 A000::/3 C000::/3 E000::/4 F000::/5 F800::/6 FE00::/9 FEC0::/10"

# Private IPv4 address space
# 10.0.0.0/8       => RFC 1918: IANA Private Use
# 169.254.0.0/16   => Link Local
# 192.0.2.0/24     => Test Net
# 192.88.99.0/24   => RFC 3068: 6to4 anycast & RFC 2544: Benchmarking addresses
# 192.168.0.0/16   => RFC 1918: Private use
PRIVATE_IPV4="10.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.2.0/24 192.88.99.0/24 192.168.0.0/16"

# Private IPv6 address space
# FC00::/7         => Unique Local Unicast
# FE80::/10        => Link Local Unicast
PRIVATE_IPV6="FC00::/7 FE80::/10"

# The multicast address space
MULTICAST_IPV4="224.0.0.0/4"
MULTICAST_IPV6="FF00::/16"

# --- END OF FIREHOL DEFAULTS ---
